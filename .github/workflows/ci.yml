name: CI

on:
  push:
    branches:
      - 'master'
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - 'master'
      - '[0-9].[0-9]+'
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Setup Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-lint-${{ hashFiles('requirements.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements.txt
    - name: Pre-Commit hooks
      uses: pre-commit/action@v2.0.0

  test:
    name: Test
    needs: lint
    strategy:
      matrix:
        pyver: [3.7, 3.8, 3.9]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-ci-${{ matrix.pyver }}-${{ hashFiles('requirements.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ matrix.pyver }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements.txt
    - name: Run unittests
      run: |
        pytest tests.py
        python -m coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  publish:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set tag
      run: |
        VERSION="${GITHUB_REF#refs/tags/v}"
        TEST="image: ghcr.io/aio-libs/get-releasenotes:${VERSION}"
        if [[ grep -F "$TEST" action.yml ]]; then
          echo "::error::Image tag in action.yml mismatches with github tag"
          exit 1
        fi
        echo "TAG=ghcr.io/aio-libs/get-releasenotes:${VERSION}" >> $GITHUB_ENV
    - name: Build Docker Image
      run: docker build -t "${TAG}" .
    - name: Push Docker Image
      run: docker push "${TAG}" .
